# This pipeline requires azure service connection of type "kubernetes service"
# Remember to have 1-1 jmeter service to k8 node (VM)/pod ratio - otherwsie some slaves can crash due to lack of resources

name: $(BuildID)
trigger: none
#config
variables:
  - group: performance-secrets
  - name: amlGitUser
    value: $(amlGitUserName)
  - name: amlGitUserToken
    value: $(amlGitToken)
  - name: cluster_namespace
    value: tools
  - name: kubernetesServiceConnection
    value: env-k8s-northeurope (tools)
  - name: scale_down_replicas
    value: 0
  - name: scale_up_replicas
    value: 2 #not more than k8 nodes number otherwise we have two slaves at 1 VM and likely crash, deployment should be uniform for predictability
  - name: scale_up_replicas_master
    value: 1
  - name: service
    value: jmeter-slaves
  - name: service-master
    value: jmeter-master
  - name: data_file
    value: "test_data/sample_data.csv"
  - name: threads
    value: 1 #browsers per pod (=node=VM)
  - name: loops
    value: 50
  - name: jmeter_args
    value: "-Gthreads=$(threads) -Gloops=$(loops)"
  - name: report_dir
    value: kubernetes/tmp/report
  - name: results
    value: kubernetes/tmp/results.csv
  - name: log
    value: kubernetes/tmp/jmeter.log

jobs:
  - job: JMeter_Tests
    displayName: JMeter Tests Regression Pipeline
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 5
    steps:
    - bash: |
       git clone  https://$(amlGitUser):$(amlGitUserToken)@atgmedia.visualstudio.com/DefaultCollection/Product/_git/marketplace-aml $HOME/marketplace-aml
       #ls $HOME/marketplace-aml
       #ls /home/vsts/marketplace-aml/performanceTests/MarketplaceAmlApi.jmx
       ls $(System.DefaultWorkingDirectory)/
       cp $HOME/marketplace-aml/performanceTests/MarketplaceAmlApi.jmx $(System.DefaultWorkingDirectory)/jmx/
      displayName: Clone aml repository

    - task: KubernetesManifest@0
      displayName: Scale slaves to $(scale_down_replicas)
      inputs:
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        action: scale
        kind: deployment
        name: $(service)
        replicas: $(scale_down_replicas)
        namespace: $(cluster_namespace)

    - task: KubernetesManifest@0
      displayName: Scale master to $(scale_down_replicas)
      inputs:
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        action: scale
        kind: deployment
        name: $(service-master)
        replicas: $(scale_down_replicas)
        namespace: $(cluster_namespace)

    - task: KubernetesManifest@0
      displayName: Scale master to $(scale_up_replicas_master)
      inputs:
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        action: scale
        kind: deployment
        name: $(service-master)
        replicas: $(scale_up_replicas_master)
        namespace: $(cluster_namespace)

    - task: KubernetesManifest@0
      displayName: Scale slaves to $(scale_up_replicas)
      inputs:
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        action: scale
        kind: deployment
        name: $(service)
        replicas: $(scale_up_replicas)
        namespace: $(cluster_namespace)

    - task: Kubernetes@1
      displayName: Login to cluster
      inputs:
        command: login
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(kubernetesServiceConnection)

    - task: ShellScript@2
      displayName: JMeter tests
      inputs:
        scriptPath: kubernetes/bin/start_test_from_script_params.sh
        args: $(cluster_namespace) $(scenario) $(data_file) "$(jmeter_args)"

    - task: PublishPipelineArtifact@1
      displayName: Archive JMeter Report
      inputs:
        path: $(report_dir)
        artifact: JmeterReport

    - task: PublishPipelineArtifact@1
      displayName: Archive Results file
      inputs:
        path: $(results)
        artifact: resuls.csv

    - task: PublishPipelineArtifact@1
      displayName: Archive Log
      inputs:
        path: $(log)
        artifact: jmeter.log
